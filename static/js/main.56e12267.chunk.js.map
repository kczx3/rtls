{"version":3,"sources":["constants.js","DeveloperForm.js","DeveloperList.js","App.js","serviceWorker.js","index.js"],"names":["devTeam","id","name","position","level","positions","key","value","available","levels","DeveloperForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","state","addDeveloper","handleChange","setState","defineProperty","target","react_default","a","createElement","onSubmit","index_es","container","item","xs","label","margin","fullWidth","onChange","autoComplete","required","spacing","md","htmlFor","inputProps","map","alignItems","justify","variant","color","onClick","Component","withStyles","listRoot","width","className","classes","devs","dev","i","button","primary","secondary","concat","App","handleNewDev","_ref","toConsumableArray","root","src_DeveloperForm","src_DeveloperList","theme","objectSpread","mixins","gutters","marginTop","unit","paddingTop","paddingBottom","minWidth","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56e12267.chunk.js","sourcesContent":["const devTeam = [\r\n    {\r\n        id: 1,\r\n        name: 'Kurt',\r\n        position: 'Scrum Master',\r\n        level: '',\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Cam',\r\n        position: 'Back end Developer',\r\n        level: '',\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Nick',\r\n        position: 'Front end Developer',\r\n        level: '',\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Kevin',\r\n        position: 'Database Developer',\r\n        level: '',\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Charlie',\r\n        position: 'Product Owner',\r\n        level: '',\r\n    },\r\n];\r\n\r\nconst positions = [\r\n    {\r\n        key: 1,\r\n        value: 'Front end Developer',\r\n        available: true,\r\n    },\r\n    {\r\n        key: 2,\r\n        value: 'Back end Developer',\r\n        available: false,\r\n    },\r\n    {\r\n        key: 3,\r\n        value: 'Database Developer',\r\n        available: false,\r\n    },\r\n    {\r\n        key: 4,\r\n        value: 'Scrum Master',\r\n        available: false,\r\n    },\r\n    {\r\n        key: 5,\r\n        value: 'Product Owner',\r\n        available: false,\r\n    },\r\n];\r\n\r\nconst levels = [\r\n    {\r\n        key: 1,\r\n        value: 'I'\r\n    },\r\n    {\r\n        key: 2,\r\n        value: 'II'\r\n    },\r\n    {\r\n        key: 3,\r\n        value: 'III'\r\n    },\r\n];\r\n\r\n\r\nexport {\r\n    devTeam,\r\n    positions,\r\n    levels,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { TextField, Grid, Select, InputLabel, MenuItem, FormControl, Button } from '@material-ui/core';\r\nimport { positions, levels } from './constants';\r\n\r\nclass DeveloperForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            position: \"\",\r\n            level: \"\",\r\n        };\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (this.state.name) {\r\n            this.props.addDeveloper(this.state);\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            label=\"Name\"\r\n                            name=\"name\"\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            onChange={this.handleChange}\r\n                            autoComplete=\"off\"\r\n                            required />\r\n                    </Grid>\r\n                    <Grid container spacing={16}>\r\n                        <Grid item xs={12} md={5}>\r\n                            <FormControl fullWidth margin=\"normal\" required>\r\n                                <InputLabel htmlFor=\"dev-position\">Position</InputLabel>\r\n                                <Select\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.position}\r\n                                    inputProps={{name: \"position\", id: \"dev-position\"}}>\r\n                                    <MenuItem value=\"\"></MenuItem>\r\n                                    {\r\n                                        positions.map(position =>\r\n                                            position.available && <MenuItem key={position.key} value={position.value}>{position.value}</MenuItem>\r\n                                        )\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={5}>\r\n                            <FormControl fullWidth margin=\"normal\">\r\n                                <InputLabel htmlFor=\"dev-level\">Level</InputLabel>\r\n                                <Select label=\"Level\" onChange={this.handleChange} value={this.state.level} inputProps={{name: \"level\", id: \"dev-level\"}}>\r\n                                <MenuItem value=\"\"></MenuItem>\r\n                                    {\r\n                                        levels.map(level => <MenuItem key={level.key} value={level.value}>{level.value}</MenuItem>)\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item container xs={12} md={2} alignItems=\"flex-end\" justify=\"center\">\r\n                            <FormControl margin=\"normal\">\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>Add</Button>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DeveloperForm;\r\n","import React from 'react';\r\nimport { List, ListItem, ListItemText, withStyles } from \"@material-ui/core\";\r\n\r\nconst styles = () => ({\r\n    listRoot: {\r\n        width: \"100%\"\r\n    }\r\n});\r\n\r\nconst DeveloperList = props => {\r\n    return (\r\n        <List className={props.classes.listRoot}>\r\n            {props.devs.map((dev, i) => (\r\n                <ListItem key={i} button>\r\n                    <ListItemText primary={dev.name} secondary={`${dev.position} ${dev.level}`} />\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(DeveloperList);\r\n","import React, { Component } from 'react';\nimport { CssBaseline, Grid, Divider, Paper, withStyles } from \"@material-ui/core\";\nimport DeveloperForm from './DeveloperForm';\nimport DeveloperList from './DeveloperList';\n\nimport { devTeam } from './constants';\n\nconst styles = (theme) => ({\n    root: {\n        ...theme.mixins.gutters(),\n        marginTop: theme.spacing.unit * 3,\n        paddingTop: theme.spacing.unit * 2,\n        paddingBottom: theme.spacing.unit * 2,\n        minWidth: (2/3)*100 + \"%\"\n    }\n});\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            devTeam\n        };\n    }\n\n    handleNewDev = ({name, position, level}) => {\n        this.setState({\n            devTeam: [\n                ...this.state.devTeam,\n                {name, position, level}\n            ]\n        });\n    }\n\n    render() {\n        return (\n            <CssBaseline>\n                <Grid container justify=\"center\" >\n                    <Paper className={this.props.classes.root}>\n                        <DeveloperForm addDeveloper={this.handleNewDev} />\n                        <Divider />\n                        <Grid container item xs={12}>\n                            <DeveloperList devs={this.state.devTeam} />\n                        </Grid>\n                    </Paper>\n                </Grid>\n            </CssBaseline>\n        );\n    }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}